

	EmPOWER Agent protocols
	

  INTRODUCTION
  
The EmPOWER protocol is a network communication protocol defined between an 
EmPOWER Controller and an EmPOWER agent.


  BASIC ORGANIZATION
  
The protocols are built around 3 major classification of the events that can 
occurs in the agent sub-system, which are:

  - SINGLE-events
    These are simple, standalone, events, requested by the controller and 
    notified back immediately by the agents. No additional logic is bound to 
    such message, and the controller decide when it's time to issue the next 
    event.
    
    Possible operation issued with single-events:
        - UNSPECIFIED, for request messages
        - SUCCESS, in case of successful operation
        - FAIL, in case of failed operation
        - NOT_SUPPORTED, in case the requested functionality is not supported

  - SCHEDULE-events
    These are events which will be requested once, and performed multiple times
    every interval given into the agent. Scheduled events allows to request 
    repeatable request at known intervals.
    
    Possible operation issued with schedule-events:
        - ADD, for request messages, to start the schedule of such event
        - REM, for request messages, to stop the schedule of such event
        - SUCCESS, for reply messages, in case of successful operation
        - FAIL, for reply messages, in case of failed operation
        - NOT_SUPPORTED, for reply messages, in case the requested functionality
            is not supported

  - TRIGGER-events
    These events should ideally enable/disable a functionality in the agent.
    Such component works with threshold or particular actions which can happens
    in a not predictable way, like the connection of a new UE.
    Is up to the implementation of the wrapper decide when such component shall
    send a feedback to the controller.
    
    Possible operation issued with schedule-events:
        - ADD, for request messages, to add a functionality
        - REM, for request messages, to remove a functionality
        - SUCCESS, for reply messages, in case of successful operation
        - FAIL, for reply messages, in case of failed operation
        - NOT_SUPPORTED, for reply messages, in case the requested functionality
            is not supported

Such message types contains a specialized header which describes the property of
the event to the agent subsystem. Every event then extend a particular Action 
that will be performed in the agent. Action and events are independent from each 
other, so a certain action can occurs in different ways; is up to the wrapper
to extend the supported operations.

The following schema resumes the organization of a generic message sent/received
using the EmPOWER protocols:

        +---------+----------+------------+----------------+
        |         |          |            |                |
        |    H    |    EH    |   ACTION   |      Data      |
        |         |          |            |                |
        +---------+----------+------------+----------------+
    
      H: Header
    This is the master header, and resume the information which are necessary
    for every message to take place. Any information stored here is always 
    present, in any message exchanged.
    
      EH: Event header
    This header can be any of the types previously discussed, and can be 
    distinguished by using the field 'type' in the master header. Some fields
    can be found in multiple type of events, but at the end of the day any event
    header is independent from the other events.
    
      ACTION
    The following section contains the action which have to take place in the
    agent. Actions are independent from events, and they only describe what is 
    necessary to do.
    
      DATA
    Some type of messages requires a variable amount of data to be sent, and 
    such data is appended at the end of the message. Fields in the "action" 
    part of the message (like "number_of") allows to determine how many of such
    data is valid.
    
Let's see some quick example of such organization:

    Dump of Single-event Hello reply, Agent --> Controller:
    01 01 00 00 00 01 00 00 00 00 00 00 19 00 00 00 00 0e 01 01 01 00 00 00 00
    
    Header:
        01          - Event type: Single (1)
        01          - Protocol version for the event (1)
        00 00 00 01 - eNB id (1)
        00 00       - Cell id (0)
        00 00 00 00 - Module id (0)
        19 00       - Size (25)
        00 00 00 0e - Sequence number (14)
        
    Event header:
        01          - Hello message (1)
        01          - Direction: Reply (1)
        01          - Operation type: Success (1)
    
    Action header:
        00 00 00 00 - Id (0)
    
    Data:
        No data


  MESSAGES and PROTOCOL BEHAVIOR

Here following there is a resume of protocol action and their type as it is
currently handled by the agent subsystem:

+-------------------+----------+----------+----------+
|                   |  SINGLE  | SCHEDULE | TRIGGER  |
| ACTION TYPE       |          |          |          |
+-------------------+----------+----------+----------+
| Cell capabilities |    X     |          |          |
+-------------------+----------+----------+----------+
| eNB capabilities  |    X     |          |          |
+-------------------+----------+----------+----------+
| Hello             |          |    X     |          |
+-------------------+----------+----------+----------+
| Mac report        |          |          |    X     |
+-------------------+----------+----------+----------+
| Ue report         |          |          |    X     |
+-------------------+----------+----------+----------+
| Ue measure        |          |          |    X     |
+-------------------+----------+----------+----------+
| Handover          |    X     |          |          |
+-------------------+----------+----------+----------+
| RAN               |    X     |          |          |
+-------------------+----------+----------+----------+

Kewin R.
